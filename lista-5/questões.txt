L5Q1:
Imagine que nós temos uma lista ordenada armazenada na memória.
E imagine que a variável k armazena um número inteiro.
Por exemplo,
L = [2,7,8,10,13,17,19,21,26,30]
k = 18
A tarefa consiste em:
→ Imprimir o maior elemento ímpar que vem depois de k.
No exemplo acima, isso nos daria: => 19
Apresente um programa que realiza essa tarefa utilizando o comando while.

L5Q2:
Imagine que nós temos uma lista armazenada na memória com vários elementos repetidos. E imagine que a variável k armazena um número inteiro.
Por exemplo,
L = [2,1,3,1,3,2,4,1,3,2,1,2]
k = 3
A tarefa consiste em
→ Encontrar as posições da primeira e última cópia de k na lista L No exemplo acima, isso nos daria
=> 2 e 8
Apresente um programa que realiza essa tarefa utilizando o comando while.
Nota: Caso não existam cópias de k na lista, o programa deve indicar esse fato.

L5Q3:
Imagine que nós temos uma lista  onde todos os elementos ímpares aparecem antes que todos os
elementos pares. Por exemplo,
L = [1,9,3,7,11,2,4,10,6,20,14,8]
A tarefa consiste em:
→ Encontrar o primeiro elemento par da lista.
No exemplo acima, isso nos daria:
=> 2
Apresente um programa que realiza essa tarefa usando o while.

L5Q4:
Imagine que nós temos uma lista  onde todos os elementos ímpares aparecem antes que todos os
elementos pares. Por exemplo,
L = [1,9,3,7,11,2,4,10,6,20,14,8]
A tarefa consiste em:
→ Encontrar o primeiro elemento par da lista.
No exemplo acima, isso nos daria:
=> 2
Apresente um programa que realiza essa tarefa de maneira esperta.

